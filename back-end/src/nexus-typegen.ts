/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./types/nexus-context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  CreateItemResponse: { // root type
    id: string; // String!
  }
  CreatePhaseResponse: { // root type
    id: string; // String!
  }
  DeleteItemResponse: { // root type
    message?: string | null; // String
  }
  DeletePhaseResponse: { // root type
    message?: string | null; // String
  }
  Item: { // root type
    id: string; // String!
    is_complete?: boolean | null; // Boolean
    phase_id?: string | null; // String
    title?: string | null; // String
  }
  Mutation: {};
  Phase: { // root type
    id: string; // String!
    is_complete?: boolean | null; // Boolean
    plan_id?: string | null; // String
    position?: number | null; // Int
    title?: string | null; // String
  }
  Plan: { // root type
    id: string; // String!
    max_phase_position?: number | null; // Int
    title?: string | null; // String
  }
  Query: {};
  UpdateItemResponse: { // root type
    id: string; // String!
    is_complete?: boolean | null; // Boolean
    phase_id?: string | null; // String
    title?: string | null; // String
  }
  UpdatePhaseResponse: { // root type
    id: string; // String!
    title?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  CreateItemResponse: { // field return type
    id: string; // String!
  }
  CreatePhaseResponse: { // field return type
    id: string; // String!
  }
  DeleteItemResponse: { // field return type
    message: string | null; // String
  }
  DeletePhaseResponse: { // field return type
    message: string | null; // String
  }
  Item: { // field return type
    id: string; // String!
    is_complete: boolean | null; // Boolean
    phase_id: string | null; // String
    title: string | null; // String
  }
  Mutation: { // field return type
    createItem: NexusGenRootTypes['CreateItemResponse'] | null; // CreateItemResponse
    createPhase: NexusGenRootTypes['CreatePhaseResponse'] | null; // CreatePhaseResponse
    deleteItem: NexusGenRootTypes['DeleteItemResponse'] | null; // DeleteItemResponse
    deletePhase: NexusGenRootTypes['DeletePhaseResponse'] | null; // DeletePhaseResponse
    updateItem: NexusGenRootTypes['UpdateItemResponse'] | null; // UpdateItemResponse
    updatePhase: NexusGenRootTypes['UpdatePhaseResponse'] | null; // UpdatePhaseResponse
  }
  Phase: { // field return type
    id: string; // String!
    is_complete: boolean | null; // Boolean
    plan_id: string | null; // String
    position: number | null; // Int
    title: string | null; // String
  }
  Plan: { // field return type
    id: string; // String!
    max_phase_position: number | null; // Int
    title: string | null; // String
  }
  Query: { // field return type
    items: NexusGenRootTypes['Item'][] | null; // [Item!]
    phases: NexusGenRootTypes['Phase'][] | null; // [Phase!]
    plan: NexusGenRootTypes['Plan'] | null; // Plan
  }
  UpdateItemResponse: { // field return type
    id: string; // String!
    is_complete: boolean | null; // Boolean
    phase_id: string | null; // String
    title: string | null; // String
  }
  UpdatePhaseResponse: { // field return type
    id: string; // String!
    title: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  CreateItemResponse: { // field return type name
    id: 'String'
  }
  CreatePhaseResponse: { // field return type name
    id: 'String'
  }
  DeleteItemResponse: { // field return type name
    message: 'String'
  }
  DeletePhaseResponse: { // field return type name
    message: 'String'
  }
  Item: { // field return type name
    id: 'String'
    is_complete: 'Boolean'
    phase_id: 'String'
    title: 'String'
  }
  Mutation: { // field return type name
    createItem: 'CreateItemResponse'
    createPhase: 'CreatePhaseResponse'
    deleteItem: 'DeleteItemResponse'
    deletePhase: 'DeletePhaseResponse'
    updateItem: 'UpdateItemResponse'
    updatePhase: 'UpdatePhaseResponse'
  }
  Phase: { // field return type name
    id: 'String'
    is_complete: 'Boolean'
    plan_id: 'String'
    position: 'Int'
    title: 'String'
  }
  Plan: { // field return type name
    id: 'String'
    max_phase_position: 'Int'
    title: 'String'
  }
  Query: { // field return type name
    items: 'Item'
    phases: 'Phase'
    plan: 'Plan'
  }
  UpdateItemResponse: { // field return type name
    id: 'String'
    is_complete: 'Boolean'
    phase_id: 'String'
    title: 'String'
  }
  UpdatePhaseResponse: { // field return type name
    id: 'String'
    title: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createItem: { // args
      phaseId: string; // String!
      planId: string; // String!
    }
    createPhase: { // args
      planId: string; // String!
    }
    deleteItem: { // args
      id: string; // String!
    }
    deletePhase: { // args
      id: string; // String!
    }
    updateItem: { // args
      id: string; // String!
      isComplete?: boolean | null; // Boolean
      title?: string | null; // String
    }
    updatePhase: { // args
      id: string; // String!
      title?: string | null; // String
    }
  }
  Query: {
    items: { // args
      planId: string; // String!
    }
    phases: { // args
      planId: string; // String!
    }
    plan: { // args
      id: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}